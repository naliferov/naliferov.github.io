{"objects":[{"id":"01JAB78517YFQYZ93J64GM4BHY","data":{"code":"const { object } = $\n\n//console.log('object name')\n\nreturn\n\nawait x.s(o.name, async (x) => {\n    const { target, name, o } = x\n    const bName = await x.p('docMkElement', { tag: 'div', class: 'object-name' })\n    target.append(bName)\n\n    if (o) {\n        bName.innerText = o.name || 'default name'\n    } else {\n        bName.innerText = name\n    }\n    bName.setAttribute('contenteditable', 'plaintext-only')\n    bName.addEventListener('keyup', () => {\n        o.name = bName.innerText.trim()\n    })\n})\n\nawait x.p('stdObjectControls', { target: dom, o })","name":"objectName"},"next_id":"01JAB79NZ7NNB6C5H299R50D18","parent_id":"01JPDPBQ2R5FSAYD1PWYCTK4PD","child_id":null,"prev_id":"01JAB77AXR7SR4HEYVF7RHJ1FE"},{"id":"01JAB790AXWSKXZCF5W6NS868G","data":{"code":"const { object } = $\nreturn\n\n\nawait x.s(o.name, async (x) => {\n    const { dom } = x\n    const header = document.createElement('div')\n    dom.prepend(header)\n    return header\n})\n\nawait x.p('stdObjectControls', { target: dom, o })","name":"testRunner"},"next_id":null,"parent_id":"01JSVBMAC310ZHDJT9QRAQ4H63","child_id":null,"prev_id":null},{"id":"01JAB79NZ7NNB6C5H299R50D18","data":{"code":"const { object, x } = $\n\n//console.log(x.g('std.context-menu'))\nreturn\n\nconst header = await x.p('addHeader', { dom })\n\nawait x.p('objectName', { target: header, o })\nawait x.p('codeShowCtrl', {\n    in: { objectDom: dom, target: header, o }\n})\n\nconst ulid = (await import(location.href + '/module/ulid.js')).default\n\nconst btn = document.createElement('span')\nheader.append(btn)\nbtn.className = 'btn'\nbtn.style.marginLeft = '5px'\nbtn.innerText = 'add object'\nbtn.style.fontFamily = 'Roboto, sans-serif'\nbtn.addEventListener('click', async () => {\n    const o = {\n        id: ulid(),\n        code: `\nconst { x, o, dom } = $\nawait x.p('stdObjectControls', { target: dom, o })\n`,\n    }\n    const app = document.getElementById('app')\n    await x.p('renderObject', { target: app, object: o })\n})\n\n// right click show context menu\n\nreturn\n\nconst selfId = document.currentScript.getAttribute('self-id')\nconst self = document.getElementById(selfId)\n\nconst props = self.getElementsByClassName('props')\nif (props.length > 0) {\n    console.log(props)\n}\n\nself.addEventListener('getProps', (e) => {\n    console.log('getProps');\n});\n\nconst view = document.createElement('div')\nview.className = 'view'\nself.append(view)\n\nconst target = document.createElement('input')\ntarget.className = 'targetInput'\nview.append(target)\n\n// const btn = document.createElement('div')\n// btn.innerText = 'trigger'\n// btn.style.border = '1px solid'\n// btn.style.width = 'fit-content'\n// btn.style.cursor = 'pointer'\n// btn.addEventListener('click', (e) => {\n//     const data = { name: 'cat' }\n//     const event = new CustomEvent('trigger', { detail: data });\n//\n//     const el = document.getElementById(target.value)\n//     if (!el) return;\n//     el.dispatchEvent(event);\n// })\n\nview.append(btn)\n","name":"addObject"},"next_id":"01JAB7A37DGN99ANRFWSVH644R","parent_id":null,"child_id":null,"prev_id":"01JAB78517YFQYZ93J64GM4BHY"},{"id":"01JAB7A37DGN99ANRFWSVH644R","data":{"code":"const { x, o, dom } = $\n\n//await x.p('stdObjectControls', { target: dom, o })\n\nconst style = document.createElement('style')\nstyle.innerHTML = `\n\n:root {\n  --green-color: #8afd8a;\n}\n\nhtml {\n  font-size: 100%;\n  text-size-adjust: 100%;\n  -webkit-text-size-adjust: 100%;\n  -moz-text-size-adjust: 100%;\n}\nbody {\n    font-variant-ligatures: none;\n    background: #3d3d3d;\n    font-size: 1rem;\n    color: var(--green-color);\n}\n.object {\n    display: inline-block;\n    vertical-align: top;\n    min-width: 10px;\n    min-height: 10px;\n\n    margin: 3px;\n    padding: 10px;\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1),\n              0 6px 20px rgba(0, 0, 0, 0.1);\n    transition: box-shadow 0.3s ease;\n    background: rgb(80 80 80);\n}\n.object-name {\n    color: var(--green-color);\n    font-size: 1.07rem;\n    margin-bottom: 10px;\n    font-family: 'Roboto', sans-serif;\n    outline: none;\n}\n.object-code {\n    margin: 0;\n    padding-top: 0.5rem;\n    font-size: 0.85rem;\n    outline: none;\n    font-family: 'JetBrains Mono', monospace;\n    font-weight: normal;\n    font-style: normal;\n    font-variant-ligatures: none;\n}\n.btn {\n    padding: 1px 2px;\n    font-family: monospace;\n    font-size: 0.9rem;\n    border: 2px solid var(--green-color);\n    border-radius: 4px;\n}\n.btn:hover {\n    background: var(--green-color);\n    color: black;\n    border: 2px solid var(--green-color);\n    cursor: pointer;\n}\n.hidden { display:none; }\n`\n\n//const head = document.getElementsByTagName('head')[0]\n//head.append(style)\n","name":"css custom"},"next_id":"01JEDYXHQJFMDQ2XD2178YEM28","parent_id":null,"child_id":null,"prev_id":"01JAB79NZ7NNB6C5H299R50D18"},{"id":"01JEDYXHQJFMDQ2XD2178YEM28","data":{"code":"const { object } = $\n\nreturn\n\nconst name = o.name\nawait x.s(name, async (x) => {\n    const { target, o } = x\n\n    const header = await x.p('addHeader', { dom: target })\n\n    await x.p('objectName', { target: header, o })\n    await x.p('codeShowCtrl', {\n        in: { objectDom: target, target: header, o }\n    })\n\n    return { header }\n})\n\nawait x.p('stdObjectControls', { target: dom, o })\n","name":"stdObjectControls"},"next_id":"01JEEGZHFSHXWB42XXG3FNG63S","parent_id":null,"child_id":null,"prev_id":"01JAB7A37DGN99ANRFWSVH644R"},{"id":"01JEEGZHFSHXWB42XXG3FNG63S","data":{"code":"const { object } = $\nreturn\n\nawait x.p('stdObjectControls', { target: dom, o })\n\nconst menu = await x.p('docMkElement', { class: 'context-menu' })\n// dom.append(shadowContainer)\n\ndocument.body.append(menu)\n\n// const oShadow = shadowContainer.attachShadow({ mode: 'open' })\n// oShadow.append(contextMenu)\n\n// console.log(oShadow)\n\nwindow.oncontextmenu = (e) => {\n    console.log('test', e.target)\n}\n","name":"std.context-menu"},"next_id":"01JEEW4BW4BR3MT9M1W1JPB18T","parent_id":null,"child_id":null,"prev_id":"01JEDYXHQJFMDQ2XD2178YEM28"},{"id":"01JEEW4BW4BR3MT9M1W1JPB18T","data":{"code":"const { object } = $\nreturn\n\nconst name = o.name\nawait x.s(name, async (x) => {\n    const { target, o } = x\n\n    const header = await x.p('addHeader', { dom: target })\n\n    await x.p('objectName', { target: header, o })\n    await x.p('codeShowCtrl', {\n        in: { objectDom: target, target: header, o }\n    })\n\n    return { header }\n})\n\nawait x.p('stdObjectControls', { target: dom, o })\n","name":"project.manager"},"next_id":"01JEZWTF1KYPX7N204G25J52QA","parent_id":null,"child_id":null,"prev_id":"01JEEGZHFSHXWB42XXG3FNG63S"},{"id":"01JEZWTF1KYPX7N204G25J52QA","data":{"code":"const { object } = $\nreturn\n\nawait x.p('stdObjectControls', { target: dom, o })\n\ninput.addEventListener('change', event => {\n    const file = event.target.files[0]\n    if (!file) return\n    const reader = new FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onload = async () => {\n        const arrBuf = reader.result\n        const data = { bin: reader.result, binMeta: { name: file.name } }\n        await x.p('set', data)\n    }\n})\n","name":"uploadFile"},"next_id":"01JF0KM168HK7F8WSEDHVJ52QJ","parent_id":null,"child_id":null,"prev_id":"01JEEW4BW4BR3MT9M1W1JPB18T"},{"id":"01JF0KM168HK7F8WSEDHVJ52QJ","data":{"code":"const { object } = $\n\n//await x.p('stdObjectControls', { target: dom, o })\n\n// create object with std.btn\n// const btn = document.createElement('span')\n// target.append(btn)\n// btn.className = 'btn'\n// btn.innerText = 'code'\n// btn.style.fontFamily = 'Roboto, sans-serif'\n\n// if there are no data in db, then init db structure and load std project.\n// everything we need we can build on backend. (npm packages, vite), we’re not tied to webcontainer usage\n\n// add dataBrowser and editorWithTabs as classical interface\n\n// ability to create value object and inspect its interface like this is TypeScript\n// with ability to static type check with reactivity\n\n// ability to insert objects in objects\n\n// add priority or make std as array for ordering support?\n\n// disable script execution in context menu\n\n// hide std element in special std block\n\n// todo: remove, select, move, copy, auth, signin, signup, signout\n\n// ability to hide/show code\n\n// store font and blocks in IndexedDB\n\n// for reorder need custom script, for access field via x.api() app blocks\n\n// todo: show names of blocks or just show some icon of block (like Minecraft)\n\n// implement sending messages to future blocks\n// the same future message can be sent to not-yet-initialized script blocks\n\n// todo: editor for styles\n// todo: elements can be loaded on backend\n// todo: defense against destroying element with div.prepend(block)\n\n// todo: переделать на base64 загрузку файлов\n","name":"todo list"},"next_id":"01JF0KTTCS21CHV5CDJHA6VYX5","parent_id":null,"child_id":null,"prev_id":"01JEZWTF1KYPX7N204G25J52QA"},{"id":"01JF0KTTCS21CHV5CDJHA6VYX5","data":{"code":"const { object } = $\nreturn\n\n//every object can be with docs","name":"std.get started (docs)"},"next_id":"01JP22650SMSN9MV9DJ5D9J7YT","parent_id":null,"child_id":null,"prev_id":"01JF0KM168HK7F8WSEDHVJ52QJ"},{"id":"01JP22650SMSN9MV9DJ5D9J7YT","data":{"code":"//object storage ////","name":"std.storage"},"next_id":"01JS94VDYB2W12XJDWGVCGQ4C4","parent_id":null,"child_id":null,"prev_id":"01JF0KTTCS21CHV5CDJHA6VYX5"},{"id":"01JPDPBQ2R5FSAYD1PWYCTK4PD","data":{"name":"std"},"next_id":"01JSVBMAC310ZHDJT9QRAQ4H63","parent_id":null,"child_id":"01JAB78517YFQYZ93J64GM4BHY","prev_id":"sys-main"},{"id":"01JS94VDYB2W12XJDWGVCGQ4C4","data":{"name":"tools","code":"const psbus = () => {\n\n  const createDataProxy = (data, x) => new Proxy(() => {}, {\n    get(target, prop) {\n      if (prop === 'p') return (...args) => x.p(...args)\n      if (prop === 's') return (...args) => { x.s(...args); return x; }\n      if (prop === 'toJSON') return () => data\n      return data[prop]\n    },\n    set(target, prop, value) {\n      data[prop] = value\n      return true\n    },\n  })\n\n  const x = {\n    events: {},\n    func: {},\n\n    async p(event, data = {}) {\n      const dataObject = typeof data === 'function' ? data : createDataProxy(data, x)\n      const func = this.func[event]\n\n      if (!func) {\n        const events = this.events\n        if (!events[event]) events[event] = []\n\n        const { promise, resolve } = Promise.withResolvers()\n        events[event].push({ data, resolve })\n        console.log(`deferred event [${event}]`)\n        return promise\n      }\n\n      if (typeof func !== 'function') console.log(event, func);\n      return func(dataObject);\n    },\n\n    async s(event, func) {\n      this.func[event] = func;\n      const events = this.events[event];\n      if (!events) return this;\n\n      console.log(`executed deferred event > [${event}]`);\n      for (const { data, resolve } of events) {\n        const response = await this.p(event, data);\n        resolve(response);\n      }\n\n      delete this.events[event];\n      return this;\n    },\n  };\n\n  return x\n}\n\n"},"prev_id":"01JP22650SMSN9MV9DJ5D9J7YT","next_id":"01JT309AEK97K1ZV8BG6933ASB"},{"id":"01JSHKMP06379QF89VC932KD82","data":{"name":"new code object","code":"const { object } = $"},"prev_id":"user-main"},{"id":"01JSVBMAC310ZHDJT9QRAQ4H63","data":{"name":"tests"},"prev_id":"01JPDPBQ2R5FSAYD1PWYCTK4PD","child_id":"01JAB790AXWSKXZCF5W6NS868G","next_id":"01JSY2GBQDTNP03RS2WK0JREG1"},{"id":"01JSY2GBQDTNP03RS2WK0JREG1","data":{"name":"backend","code":"const { object } = $\n\n//backend"},"prev_id":"01JSVBMAC310ZHDJT9QRAQ4H63"},{"id":"01JT309AEK97K1ZV8BG6933ASB","data":{"name":"ulid","code":"const ulid = (() => {\n  const ENCODING = '0123456789ABCDEFGHJKMNPQRSTVWXYZ';\n  const ENCODING_LEN = ENCODING.length;\n  const TIME_LEN = 10;\n  const RANDOM_LEN = 16;\n  const TIME_MAX = Math.pow(2, 48) - 1;\n\n  let lastTime = 0;\n  let lastRandom = '';\n\n  function getPRNG(allowInsecure) {\n    if (typeof crypto !== 'undefined' && crypto.getRandomValues) {\n      return () => {\n        const buf = new Uint8Array(1);\n        crypto.getRandomValues(buf);\n        return buf[0] / 0xff;\n      };\n    }\n    if (allowInsecure) return () => Math.random();\n    throw new Error('secure crypto unavailable');\n  }\n\n  function randChar(rng) {\n    let r = Math.floor(rng() * ENCODING_LEN);\n    if (r === ENCODING_LEN) r = ENCODING_LEN - 1;\n    return ENCODING[r];\n  }\n\n  function encodeTime(ms) {\n    if (!Number.isInteger(ms) || ms < 0 || ms > TIME_MAX) {\n      throw new Error('invalid time');\n    }\n    let str = '';\n    for (let i = 0; i < TIME_LEN; i++) {\n      str = ENCODING[ms % ENCODING_LEN] + str;\n      ms = Math.floor(ms / ENCODING_LEN);\n    }\n    return str;\n  }\n\n  function encodeRandom(rng) {\n    let str = '';\n    for (let i = 0; i < RANDOM_LEN; i++) {\n      str = randChar(rng) + str;\n    }\n    return str;\n  }\n\n  function increment(str) {\n    const arr = str.split('');\n    for (let i = arr.length - 1; i >= 0; i--) {\n      const idx = ENCODING.indexOf(arr[i]);\n      if (idx < 0) throw new Error('invalid random component');\n      if (idx < ENCODING_LEN - 1) {\n        arr[i] = ENCODING[idx + 1];\n        return arr.join('');\n      }\n      arr[i] = ENCODING[0];\n    }\n    throw new Error('cannot increment');\n  }\n\n  return function ({ monotonic = false, allowInsecure = false, prng, time } = {}) {\n    const ms = Number.isInteger(time) ? time : Date.now();\n    const rng = prng || getPRNG(allowInsecure);\n\n    if (monotonic) {\n      if (ms <= lastTime) {\n        lastRandom = increment(lastRandom);\n      } else {\n        lastTime = ms;\n        lastRandom = encodeRandom(rng);\n      }\n      return encodeTime(lastTime) + lastRandom;\n    }\n\n    return encodeTime(ms) + encodeRandom(rng);\n  }\n})()\n\nreturn ulid()"},"prev_id":"01JS94VDYB2W12XJDWGVCGQ4C4"},{"id":"sys-main","data":{"code":"class IndexedDb {  \n  async open(dbName = 'default', storages = ['default']) {\n    return new Promise((resolve, reject) => {\n      const openRequest = indexedDB.open(dbName)\n      \n      openRequest.onerror = () => {\n        reject(openRequest.error)\n      }\n      openRequest.onsuccess = () => {\n        this.db = openRequest.result\n        resolve(this.db)\n      }\n      openRequest.onupgradeneeded = () => {\n        const db = openRequest.result\n        \n        for (const storageName of storages) {\n          if (!db.objectStoreNames.contains(storageName)) {\n            db.createObjectStore(storageName)\n          }\n        }\n      }\n    })\n  }\n  async set(x) {\n    const { storeName = 'default', id, value } = x\n\n    return new Promise((resolve, reject) => {\n      const rq = this.db.transaction(storeName, 'readwrite').objectStore(storeName).put(value, id)\n      rq.onsuccess = () => resolve(rq.result)\n      rq.onerror = () => reject(rq.error)\n    })\n  }\n  async get(x) {\n    const { storeName = 'default', id } = x\n\n    return new Promise((resolve, reject) => {\n      const rq = this.db.transaction(storeName, 'readonly').objectStore(storeName).get(id)\n      rq.onsuccess = () => resolve(rq.result)\n      rq.onerror = () => reject(rq.error)\n    })\n  }\n  async getAll(x) {\n    const { storeName = 'default' } = x\n    return new Promise((resolve, reject) => {\n      const rq = this.db.transaction(storeName, 'readonly').objectStore(storeName).getAll()\n      rq.onsuccess = () => resolve(rq.result)\n      rq.onerror = () => reject(rq.error)\n    })\n  }\n  async getKeys(x) {\n    const { storeName = 'default' } = x\n    return new Promise((resolve, reject) => {\n      const rq = this.db.transaction(storeName, 'readonly').objectStore(storeName).getAllKeys()\n      rq.onsuccess = () => resolve(rq.result)\n      rq.onerror = () => reject(rq.error)\n    })\n  }\n  async del(x) {\n    const { storeName = 'default', id } = x\n\n    return new Promise((resolve, reject) => {\n      const rq = this.db.transaction(storeName, 'readwrite').objectStore(storeName).delete(id)\n      rq.onsuccess = () => resolve(rq.result)\n      rq.onerror = () => reject(rq.error)\n    })\n  }\n}\n\nclass BaseRepo {\n  db = null\n  table = null\n  init(db) { \n    this.db = db\n  }\n  async get(id) {\n    return await this.db.get({ storeName: this.table, id })\n  }\n  async getAll() {\n    return await this.db.getAll({ storeName: this.table })\n  }\n  async set(id, object) {\n      await this.db.set({ storeName: this.table, id, value: object }) \n  }\n  async del(id) {\n    await this.db.del({ storeName: this.table, id })\n  }\n}\nclass ObjectsRepository extends BaseRepo { table = 'objects' }\nclass KvRepo extends BaseRepo {\n  table = 'kv'\n  async getKey(key) {\n    return await this.db.get({ storeName: this.table, id: key })\n  }\n  async setKey(key, value) {\n    await this.db.set({ storeName: this.table, id: key, value })\n  }\n  async delKey(key) {\n    await this.db.del({ storeName: this.table, id: key })\n  }\n}\n\nconst dbSys = new IndexedDb\nawait dbSys.open('sys', ['objects'])\nconst dbUser = new IndexedDb\nawait dbUser.open('user', ['objects', 'kv'])\n\nconst sysObjectsRepo = new ObjectsRepository\nsysObjectsRepo.init(dbSys)\n\nconst userObjectsRepository = new ObjectsRepository\nuserObjectsRepository.init(dbUser)\n\nconst kvRepo = new KvRepo\nkvRepo.init(dbUser)\n\nconst mk = (id, target, tag = 'div') => {\n  const el = document.createElement(tag)\n  if (id) {\n    if (id[0] === '.') {\n      el.className = id.slice(1)\n    } else {\n      el.id = id\n    }\n  }\n  target.append(el)\n  return el\n}\n\n//LOAD FONTS\n{\n  const fontUrl = 'https://fonts.googleapis.com/css2?family';\n  [\n    `${fontUrl}=Roboto:wght@400;700&display=swap`,\n    `${fontUrl}=JetBrains+Mono:wght@400;700&display=swap`\n  ].forEach(url => {\n    const link = mk(null, document.head, 'link')\n    link.rel = 'stylesheet'\n    link.href = url\n  })\n}\n\n//LOAD MONACO EDITOR\n{\n  const { promise: editorIsReady, resolve: editorIsReadyResolve } = Promise.withResolvers()\n  const requireScript = document.createElement('script');\n  requireScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js'\n  requireScript.onload = () => {\n      require.config({ paths: { 'vs': 'https://cdn.jsdelivr.net/npm/monaco-editor@0.52.2/min/vs' } })\n      require(['vs/editor/editor.main'], editorIsReadyResolve)\n  }\n  document.head.append(requireScript)\n  await editorIsReady\n}\n\ndocument.body.style.margin = 0\nconst app = mk('app', document.body)\napp.style.display = 'flex'\n\nconst obWidth = 250\nlet ob = mk('object-browser', app)\nob.style.width = obWidth + 'px'\nob.style.height = window.innerHeight + 'px'\n\nob = ob.attachShadow({mode: 'open'})\n  const style = mk(0, ob, 'style')\n  style.textContent = `\n    :host { \n      color: #333333; \n      font-family: Roboto, monospace;\n      font-size: 16px\n    }\n    .op-list-btn {\n      width: 24px;\n      height: 24px;\n      cursor: pointer;\n    }\n    .object { cursor: pointer; }\n    .children, .cmd-input { margin-left: 1em; }\n    input {\n      font\n    }\n  `\n\nconst obHeader = mk('.ob-header', ob)\n\nconst exportDump = async (db, storeNames = [], dumpName) => {\n  const dump = {}\n\n  for (const storeName of storeNames) {\n    if (storeName === 'kv') {\n      const o = {}\n      const keys = await db.getKeys({ storeName })\n      for (const k of keys) {\n        o[k] = await db.get({ storeName, id: k })\n      }\n      dump[storeName] = o\n    } else {\n      dump[storeName] = await db.getAll({ storeName })\n    }\n  }\n  const a = document.createElement('a')\n  a.href = URL.createObjectURL(new Blob([JSON.stringify(dump)], { type: 'application/json' }))\n  a.download = dumpName || 'dump.json'\n  a.click()\n  URL.revokeObjectURL(a.href)\n}\n\nconst CMDs = {\n  async 'new-object'([ name ]) {\n    const o = { id: await x.x('ulid'), data: { name } }\n    console.log(o)\n    //await sysObjectsRepo.set(nejwObject.id, newObject)\n  },\n  async 'export-sys-dump'([ id ]) { exportDump(dbSys, ['objects'], 'dump.json') }\n}\n\nconst cmdInput = mk('.cmd-input', ob, 'input')\ncmdInput.setAttribute('placeholder', 'Insert cmd...')\n\nconst lastCmdInput = await kvRepo.getKey('lastCmdInput')\nif (lastCmdInput) {\n  cmdInput.value = lastCmdInput\n  cmdInput.focus()\n}\n\ncmdInput.addEventListener('keyup', async (e) => {\n  const t = cmdInput.value.trim()\n  await kvRepo.setKey('lastCmdInput', t || '')\n\n  if (e.key !== 'Enter') return\n  const [ cmd, ...args ] = t.split(' ')\n  if (CMDs[cmd]) CMDs[cmd](args)\n})\n\n{\n  ob = mk('ob-root', ob)\n  ob.childrenDiv = mk(null, ob)\n  ob.childrenDiv.className = 'children'\n}\n\nconst readFileFromInput = async (fileInput) => {\n  const { promise, resolve, reject } = Promise.withResolvers()  \n  const r = new FileReader()\n  r.readAsText(fileInput)\n  r.onload = async () => resolve(r.result)\n  r.onerror = reject\n  return promise\n}\n\nconst importDumpFromUrl = async (db, url) => await importDump(db, await (await fetch(url)).json())\nconst importDump = async (db, objects) => {\n  for (const storeName in objects) {\n    const store = objects[storeName]\n    \n    if (Array.isArray(store)) {\n      for (const object of store) {\n        await db.set({ storeName, id: object.id, value: object })\n      }\n    } else {\n      for (const key in store) {\n        await db.set({ storeName, id: key, value: store[key] })\n      }\n    }\n  }\n}\n\nconst opListManager = {\n  opList: null,\n  createOpList() {\n    if (this.opList) {\n      this.removeOpList()\n      return\n    }\n    this.opList = mk('.op-list', app)\n    const style = mk(null, this.opList, 'style')\n    style.innerHTML = `\n      .op-list {\n        min-width: 10em;\n        position: absolute;\n        background: #f3f3f3;\n        color: #616161;\n        font-family: Roboto, sans-serif;\n        box-shadow: rgba(2, 0, 0, 0.35) 0px 5px 15px;\n        cursor: pointer;\n        z-index: 1000;\n      }\n      .op-list-item {\n        padding: 5px;\n      }\n      .op-list-item:hover {\n        background:rgb(221, 221, 221);\n      }          \n    `\n    return this.opList\n  },\n  removeOpList() {\n    this.opList.remove()\n    this.opList = null\n  }\n}\n\n//OP LIST BUTTON, BURGER MENU\n{\n  const opListBtn = mk('.op-list-btn', obHeader)\n  opListBtn.innerHTML = `\n    <svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke-width=\"2\" stroke=\"currentColor\" class=\"size-6\">\n    <path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5\" />\n    </svg>\n  `\n\n  const opListBtnRect = opListBtn.getBoundingClientRect()\n\n  opListBtn.addEventListener('click', (e) => {\n    const opList = opListManager.createOpList()\n    if (!opList) return\n\n    opList.style.left = `${opListBtnRect.left}px`\n    opList.style.top = `${opListBtnRect.top + opListBtnRect.height}px`\n\n    const itemSystemImport = mk('.op-list-item', opList)\n    itemSystemImport.textContent\n      = 'Import system objects'\n\n    let fInput = mk(null, itemSystemImport, 'input')\n    fInput.type = 'file'\n    fInput.style.marginLeft = '10px'\n    fInput.addEventListener('change', async(e) => {\n      importDump(dbSys, JSON.parse(await readFileFromInput(e.target.files[0])))\n      opListManager.removeOpList()\n    })\n\n    const itemUserImport = mk('.op-list-item', opList)\n    itemUserImport.textContent = 'Import user objects'\n\n    fInput = mk(null, itemUserImport, 'input')\n    fInput.type = 'file'\n    fInput.style.marginLeft = '10px'\n    fInput.addEventListener('change', async (e) => {\n      importDump(dbUser, JSON.parse(await readFileFromInput(e.target.files[0])))\n      opListManager.removeOpList()\n    })\n\n    const itemUserExport = mk('.op-list-item', opList)\n    itemUserExport.textContent = 'Export user objects'\n    itemUserExport.addEventListener('click', (e) => {\n      e.preventDefault()\n      exportDump(dbUser, ['objects', 'kv'], 'user-dump.json')\n      opListManager.removeOpList()\n    })\n  })\n}\n\nconst tabManager = {\n  activeTab: null,\n  init(target, mk, width) {\n    const tabsContainer = mk('tabs-container', target)\n    tabsContainer.style.width = width\n    const style = mk(null, tabsContainer, 'style')\n    style.innerHTML = `\n      #tabs-bar { display: flex; }\n      .tab {\n        display: flex;\n        padding: 5px;\n        align-items: center;\n        cursor: pointer;\n      }\n      .tab.active {\n        background: #e2e2e2;\n      }\n      .tab-name {\n        font-family: Roboto, sans-serif;\n        margin-right: 3px;\n        color: #333333;\n      }\n      .tab-view.hidden {\n        display: none;\n      }\n      .object-code {\n        font-family: 'JetBrains Mono', monospace;\n      }\n      #close-tab-btn {\n        width: 18px;\n        height: 18px;\n        stroke: currentColor;\n      }\n    `\n\n    this.tabsBarHeight = 35\n    this.tabsBar = mk('tabs-bar', tabsContainer)\n\n    this.tabsView = mk('tabs-view', tabsContainer)\n    this.tabsView.style.height = window.innerHeight - this.tabsBarHeight + 'px' \n    this.tabsView.style.overflow = 'scroll'\n  },\n  openTab(repo, object) {\n\n    const tab = mk(null, this.tabsBar)\n    tab.className = 'tab active'\n    tab.setAttribute('object-id', object.id)\n    tab.addEventListener('click', () => {\n      this.activateTab(tab)\n      this.saveActiveTab(object.id)\n    })\n\n    tab.name = mk(null, tab)\n    tab.name.className = 'tab-name'\n    tab.name.textContent = object.data.name\n\n    tab.closeBtn = mk('close-tab-btn', tab)\n    tab.closeBtn.addEventListener('click', (e) => {\n      e.stopPropagation()\n\n      let nextTab\n\n      if (tab === this.activeTab) {\n        const tabs = this.tabsBar.children\n        const tabIndex = Array.from(tabs).indexOf(tab)\n        \n        nextTab = tabIndex > 0 \n          ? tabs[tabIndex - 1]\n          : tabs[tabIndex + 1];\n      }\n\n      this.closeTab(tab)\n      objectManager.closeObject(object, 'tabManager')\n\n      if (nextTab) {\n        this.activateTab(nextTab)\n        this.saveActiveTab(nextTab.getAttribute('object-id'))\n      } else {\n        this.clearActiveTab()\n      }\n    })\n    tab.closeBtn.innerHTML += '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" stroke-width=\"1.5\"><path stroke-linecap=\"round\" stroke-linejoin=\"round\" d=\"M6 18 18 6M6 6l12 12\"></path></svg>'\n    tab.view = mk('.tab-view', this.tabsView)\n\n    const pre = mk('object-code', tab.view, 'div')\n    pre.style.height = window.innerHeight - this.tabsBarHeight + 'px' \n    const editor = monaco.editor.create(pre, {\n      value: object.data.code, \n      language: 'javascript',\n      theme: 'vs-dark', \n      automaticLayout: true, \n      fontSize: 15\n    })\n\n    const openedObjects = objectManager.getOpenedObjects()\n    const pos = openedObjects[object.id]\n    if (pos && typeof pos === 'object') editor.revealPositionInCenter(pos)\n\n    editor.onDidChangeModelContent((e) => {\n      if (!object.id) return\n      \n      const pos = editor.getPosition()\n      objectManager.openObject(object, pos)\n      object.data.code = editor.getValue()\n\n      repo.set(object.id, object)\n    })\n\n    this.activateTab(tab)\n  },\n  closeTab(tab) {\n    tab.remove()\n    tab.view.remove()\n  },\n  activateTab(tab) {\n    if (this.activeTab) {\n      this.activeTab.classList.remove('active')\n      this.activeTab.view.classList.add('hidden')\n    }\n    tab.classList.add('active')\n    tab.view.classList.remove('hidden')\n    this.activeTab = tab\n  },\n  saveActiveTab(id) {\n    kvRepo.setKey('activeTabId', id)\n  },\n  clearActiveTab() {\n    kvRepo.delKey('activeTabId')\n  },\n  async restoreLastActiveTab() {\n    const value = await kvRepo.getKey('activeTabId')\n    if (!value) return\n\n    const tab = this.tabsBar.querySelector(`[object-id=\"${value}\"]`)\n    if (!tab) return\n    this.activateTab(tab)\n  }\n}\n\nconst tabManagerWidth = `calc(100% - ${obWidth}px)`\ntabManager.init(app, mk, tabManagerWidth)\n\nconst objectManager = {\n  openedObjectsIds: {},\n\n  async init() {\n    const v = await kvRepo.getKey('openedObjectsIds')\n    if (v) this.openedObjectsIds = v\n  },\n  getOpenedObjects() {\n    return this.openedObjectsIds\n  },\n  isObjectOpened(objectId) {\n    return Boolean(this.openedObjectsIds[objectId])\n  },\n  openObject(object, pos) {\n    this.openedObjectsIds[object.id] = pos ? pos : 1\n    this.saveOpenedObjects()\n  },\n  openObjectWithObject(object, otherObject) {},\n  closeObject(object) {\n    delete this.openedObjectsIds[object.id]\n    this.saveOpenedObjects()\n  },\n  saveOpenedObjects() {\n    kvRepo.setKey('openedObjectsIds', this.openedObjectsIds)\n  },\n}\nawait objectManager.init()\n\nconst renderObject = (object, target, repo) => {\n  const d = mk(object.id, target)\n  d.className = 'object'\n\n  d.name = mk(null, d)\n  d.name.innerText = object.data.name\n  d.name.addEventListener('click', async (e) => {\n    if (objectManager.isObjectOpened(object.id)) return\n    \n    tabManager.openTab(repo, object)\n    tabManager.saveActiveTab(object.id)\n    objectManager.openObject(object)\n  })\n\n  d.name.addEventListener('contextmenu', (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n\n    const opList = opListManager.createOpList()\n    if (!opList) return\n    opList.style.left = `${e.clientX}px`\n    opList.style.top = `${e.clientY}px`\n\n    const mkOp = (text) => {\n      let i = mk(null, opList)\n      i.className = 'op-list-item'\n      i.textContent = text\n      return i\n    }\n\n    mkOp('Info').addEventListener('click', () => {\n      opListManager.removeOpList()\n      console.log(object)\n    })\n    mkOp('Rename').addEventListener('click', () => {\n      opListManager.removeOpList()\n      dom.name.contentEditable = true\n      dom.name.focus()\n\n      const originalName = dom.name.textContent\n      const handleRename = async () => {\n        dom.name.contentEditable = false\n        const newName = dom.name.textContent.trim()\n        if (!newName || newName === originalName) {\n            dom.name.textContent = originalName\n            return\n        }\n        object.data.name = newName\n        await repo.set(object.id, object)\n      }\n\n      const onKeyDown = async (e) => {\n        if (e.key === 'Enter') {\n          e.preventDefault()\n          await handleRename()\n          dom.name.removeEventListener('keydown', onKeyDown)\n        }\n        if (e.key === 'Escape') {\n          dom.name.contentEditable = false\n          dom.name.textContent = originalName\n          dom.name.removeEventListener('keydown', onKeyDown)\n        }\n      }\n\n      dom.name.addEventListener('keydown', onKeyDown)\n    })\n  })\n\n  const children = mk(null, d)\n  children.className = 'children'\n\n  return { objectDom: d, children }\n}\n\nconst mkObservableObject = async (objectsRepository, object) => {\n  const isObj = (o) => typeof o === 'object' && o !== null\n  const onUpdateCallback = () => {} // objectStore.saveById(object.id)\n\n  const mkObservable = (obj) => {\n    for (const k in obj) {\n      if (isObj(obj[k])) {\n        console.log(k)\n        obj[k] = mkObservable(obj[k])\n      }\n    }\n\n    return new Proxy(obj, {\n      set: (target, prop, value) => {\n        if (isObj(value)) value = mkObservable(value)\n        if (Array.isArray(target) && prop === 'length') return true\n\n        target[prop] = value\n        if (prop === '_') return true\n\n        onUpdateCallback()\n        return true\n      },\n      deleteProperty: (target, prop) => {\n        delete target[prop]\n        onUpdateCallback()\n        return true\n      },\n    })\n  }\n\n  return mkObservable(object)\n}\n\nconst createFnFromCode = async (codeStr) => {\n  const code = `export default async ($) => { \n    ${codeStr} \n  }`\n  const blob = new Blob([code], { type: 'application/javascript' })\n  const m = await import(URL.createObjectURL(blob))\n  return m.default\n}\n\nconst x = {\n  modules: {},\n  s(name, o) { this.modules[name] = o },\n  g(name) { return this.modules[name] },\n  x(name, args) { return this.g(name)(args) },\n}\n\nconst processObjectsNew = async (repo, targetDiv) => {\n  const objects = await repo.getAll()\n  const byId = {}\n  const nameToId = {}\n  const names = []\n\n  for (let i = 0; i < objects.length; i++) {\n    const o = objects[i]\n    const name = o.data.name\n\n    byId[o.id] = o\n    nameToId[name] = o.id\n    names.push(name)\n\n    if (o.id !== 'sys-main' && o.data.code) {\n      try {\n        const fn = await createFnFromCode(o.data.code)\n        x.s(name, fn)\n      } catch (e) {\n        console.error(e)\n      }\n    }\n  }\n  \n  const sortedNames = names.sort()\n  for (let i = 0; i < sortedNames.length; i++) {\n    const name = sortedNames[i]\n    const o = byId[ nameToId[name] ]\n\n    if (o.id !== 'sys-main' && o.data.code) {\n      try {\n        const fn = x.g(name)\n        await fn({ object: o, x })\n      } catch (e) {\n        console.error(e)\n      }\n    }\n    if (objectManager.isObjectOpened(o.id)) {\n      tabManager.openTab(repo, o)\n    }\n    renderObject(o, targetDiv, repo)\n  }\n\n  //console.log(await x.g('ulid')())\n}\n\nawait processObjectsNew(sysObjectsRepo, ob.childrenDiv)\nawait tabManager.restoreLastActiveTab()","name":"sys-main"},"next_id":"01JPDPBQ2R5FSAYD1PWYCTK4PD","parent_id":null,"child_id":null}]}